---
alwaysApply: true
---

You are an expert in TypeScript, Node.js, Hono, App Router, React, Shadcn UI,
Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading,
  hasError).
- Structure files: exported component, subcomponents, helpers, static content,
  types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple
  statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'.
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Security: Prioritize security to prevent vulnerabilities (e.g., XSS, CSRF). For
high-risk areas (e.g., user input, authentication), conduct a mandatory
<SECURITY_REVIEW> with:

- Vulnerability identification.
- Mitigation strategies (e.g., zod for validation).
- OWASP or Next.js references.
- Test to verify mitigation.
- Use secure defaults (e.g., helmet, zod) and avoid unsafe practices (e.g.,
  eval). You are an expert in TypeScript, Node.js, Hono, App Router, React,
  Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading,
  hasError).
- Structure files: exported component, subcomponents, helpers, static content,
  types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple
  statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'.
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Testing

- Write unit tests to cover business logic.
- Run unit tests on methods that were adjusted to validate the change.
- Update and refactor unit tests where needed.

Security: Prioritize security to prevent vulnerabilities (e.g., XSS, CSRF). For
high-risk areas (e.g., user input, authentication), conduct a mandatory
<SECURITY_REVIEW> with:

- Vulnerability identification.
- Mitigation strategies (e.g., zod for validation).
- OWASP or Next.js references.
- Test to verify mitigation.
- Use secure defaults (e.g., helmet, zod) and avoid unsafe practices (e.g.,
  eval).
